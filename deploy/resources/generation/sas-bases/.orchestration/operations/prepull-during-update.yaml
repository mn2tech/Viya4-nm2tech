apiVersion: orchestration.sas.com/v3beta1
kind: LifecycleOperation
metadata:
  annotations:
    sas.com/component-name: sas-prepull
    sas.com/component-version: 2.7.29-20250429.1745962194535
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: sas-prepull
    participate.lifecycle.sas.com/deploy-stage: "true"
  name: prepull-during-update
spec:
  args:
  - name: namespace
    required: true
  - name: manifest
    required: true
  - default: 1800s
    name: timeout
  source: "package main\nimport (\n  \"encoding/json\"\n  \"regexp\"\n  \"fmt\"\n  \"time\"\n  \"sas/orchestration/lifecycle\"\n  m \"sas/orchestration/lifecycle/manifest\"\n  c \"sas/orchestration/lifecycle/cluster\"\n)\nfunc main() {\n  manifest := lifecycle.Arg(\"manifest\")\n  namespace := lifecycle.Arg(\"namespace\")\n  timeout := lifecycle.Arg(\"timeout\")\n  if prepullPresent(manifest) == false {\n    // handle orders without prepull\n    return\n  }\n  if isWorkbench(manifest) == true {\n    // Handle orders related to Workbench. Workbench\n    // cannot use Viya 4 lifecycle op.\n    return\n  }\n  deleteExistingPrepull(namespace, timeout)\n  deployPrepullcm(manifest, namespace, timeout)\n  deployInputcm(manifest, namespace, timeout)\n  deployGocm(manifest, namespace, timeout)\n  deploySCcm(manifest, namespace, timeout)\n  deployPrepullpt(manifest, namespace, timeout)\n  deployCSpt(manifest, namespace, timeout)\n  deployPrepullrl(manifest, namespace, timeout)\n  deployPrepullsa(manifest, namespace, timeout)\n  deployPrepullrb(manifest, namespace, timeout)\n  deployImagesecs(manifest, namespace, timeout)\n  deployConfigMap(manifest, namespace, timeout)\n  waitForConfigMapCreate(namespace, timeout)\n  deployPrepull(manifest, namespace, timeout)\n  waitForConfigMapDelete(namespace, timeout)\n}\nfunc deleteExistingPrepull(namespace, timeout string) {\n  matches, err := c.Resources(c.Namespace(namespace), c.Resource(\"Deployment\"), c.Name(\"sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(matches) > 0 {\n    _, err = lifecycle.Kubectl(\"delete\", \"deployment,pods\", \"--selector\", \"app.kubernetes.io/name=sas-prepull\", \"--namespace\", namespace, \"--timeout\", timeout, \"--wait\")\n    if err != nil {\n      panic(err)\n    }\n  }\n  return\n}\nfunc deployConfigMap(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.LabelSelector(\"orchestration.sas.com/lifecycle=components\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Needed configmap not found\")\n  }\n  componentsConfigMap := resources[0]\n  renameResource(componentsConfigMap, \"sas-prepull-components\")\n  componentsConfigMapJson, err := json.Marshal(componentsConfigMap.Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(componentsConfigMapJson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployInputcm(manifest, namespace, timeout string) {\n  inputCm := \"\"\n  sName := \"\"\n  inputRegEx, _ := regexp.Compile(\"^input-[a-zA-Z0-9]{10}$\")\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"))\n  if err != nil {\n    panic(err)\n  }\n  for _, resource := range resources {\n    rName := resource.F(\"metadata\").F(\"name\").Value()\n    sName, _ = rName.(string)\n    if inputRegEx.MatchString(sName) {\n      inputCm = sName\n      break \n    }\n  }\n  inCm, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.Name(inputCm))\n  if err != nil {\n    panic(err)\n  }\n  if len(inCm) != 1 {\n    panic(\"Unable to get input config map\")\n  }\n  injson, err := json.Marshal(inCm[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(injson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }  \n}\nfunc deploySCcm(manifest, namespace, timeout string) {\n  inputCm := \"\"\n  sName := \"\"\n  inputRegEx, _ := regexp.Compile(\"^sas-shared-config-[a-zA-Z0-9]{10}$\")\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"))\n  if err != nil {\n    panic(err)\n  }\n  for _, resource := range resources {\n    rName := resource.F(\"metadata\").F(\"name\").Value()\n    sName, _ = rName.(string)\n    if inputRegEx.MatchString(sName) {\n      inputCm = sName\n      break \n    }\n  }\n  inCm, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.Name(inputCm))\n  if err != nil {\n    panic(err)\n  }\n  if len(inCm) != 1 {\n    panic(\"Unable to get input config map\")\n  }\n  injson, err := json.Marshal(inCm[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(injson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }  \n}\nfunc deployGocm(manifest, namespace, timeout string) {\n  inputCm := \"\"\n  sName := \"\"\n  inputRegEx, _ := regexp.Compile(\"^sas-go-config-[a-zA-Z0-9]{10}$\")\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"))\n  if err != nil {\n    panic(err)\n  }\n  for _, resource := range resources {\n    rName := resource.F(\"metadata\").F(\"name\").Value()\n    sName, _ = rName.(string)\n    if inputRegEx.MatchString(sName) {\n      inputCm = sName\n      break \n    }\n  }\n  inCm, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.Name(inputCm))\n  if err != nil {\n    panic(err)\n  }\n  if len(inCm) != 1 {\n    panic(\"Unable to get input config map\")\n  }\n  injson, err := json.Marshal(inCm[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(injson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }  \n}\nfunc deployCSpt(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"PodTemplate\"), m.Name(\"sas-compute-job-config\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Compute job config podtemplate not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepullpt(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"PodTemplate\"), m.Name(\"sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Prepull podtemplate not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepullrb(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"RoleBinding\"), m.Name(\"sas-prepull-v2-namespace\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Prepull role binding not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepullrl(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"Role\"), m.Name(\"sas-prepull-v2-namespace\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Prepull role not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepullsa(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"ServiceAccount\"), m.Name(\"sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Prepull service account config not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepullcm(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"ConfigMap\"), m.LabelSelector(\"app.kubernetes.io/name=sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Prepull parameters config map not found\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployImagesecs(manifest, namespace, timeout string) {\n  imageSec := \"\"\n  sName := \"\"\n  inputRegEx, _ := regexp.Compile(\"^sas-image-pull-secrets-[a-zA-Z0-9]{10}$\")\n  resources, err := m.Resources(manifest, m.Kind(\"Secret\"))\n  if err != nil {\n    panic(err)\n  }\n  for _, resource := range resources {\n    rName := resource.F(\"metadata\").F(\"name\").Value()\n    sName, _ = rName.(string)\n    if inputRegEx.MatchString(sName) {\n      imageSec = sName\n      break\n    }\n  }\n  inSe, err := m.Resources(manifest, m.Kind(\"Secret\"), m.Name(imageSec))\n  if err != nil {\n    panic(err)\n  }\n  if len(inSe) != 1 {\n    panic(\"Unable to get input config map\")\n  }\n  injson, err := json.Marshal(inSe[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(injson), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc deployPrepull(manifest, namespace, timeout string) {\n  resources, err := m.Resources(manifest, m.Kind(\"Deployment\"), m.Name(\"sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  if len(resources) != 1 {\n    panic(\"Unable to find sas-prepull deployment\")\n  }\n  json, err := json.Marshal(resources[0].Value())\n  if err != nil {\n    panic(err)\n  }\n  _, err = lifecycle.KubectlWithStdin(string(json), \"apply\", \"--namespace\", namespace, \"-f\", \"-\", \"--timeout\", timeout)\n  if err != nil {\n    panic(err)\n  }\n}\nfunc waitForConfigMapCreate(namespace, timeout string) {\n  tooLong, err := time.ParseDuration(timeout)\n  if err != nil {\n    panic(err)\n  }\n  stopAt := time.Now().Add(tooLong)\n  sleepDuration := 100 * time.Millisecond\n  for {\n    matches, err := c.Resources(c.Namespace(namespace), c.Resource(\"ConfigMap\"), c.Name(\"sas-prepull-components\"))\n    if err != nil {\n      panic(err)\n    }\n    if len(matches) == 1 {\n      return\n    }\n    if time.Now().After(stopAt) {\n      panic(\"Timed out waiting for creation of sas-prepull-components\")\n    }\n    time.Sleep(sleepDuration)\n  }\n}\nfunc waitForConfigMapDelete(namespace, timeout string) {\n  tooLong, err := time.ParseDuration(timeout)\n  if err != nil {\n    panic(err)\n  }\n  stopAt := time.Now().Add(tooLong)\n  sleepDuration := 100 * time.Millisecond\n  for {\n    matches, err := c.Resources(c.Namespace(namespace), c.Resource(\"ConfigMap\"), c.Name(\"sas-prepull-components\"))\n    if err != nil {\n      panic(err)\n    }\n    if len(matches) == 0 {\n      return\n    }\n    if time.Now().After(stopAt) {\n      panic(\"Timed out waiting for deletion of sas-prepull-components\")\n    }\n    time.Sleep(sleepDuration)\n  }\n}\nfunc renameResource(resource *lifecycle.Resource, name string) {\n  resourceAsMap, ok := resource.Value().(map[string]interface{})\n  if !ok {\n    panic(\"not the right type\")\n  }\n  resourceMetadataAsMap, ok := resourceAsMap[\"metadata\"].(map[string]interface{})\n  if !ok {\n    panic(\"not the right type\")\n  }\n  resourceMetadataAsMap[\"name\"] = name\n}\nfunc isWorkbench(manifest string) bool {\n  resources, err := m.Resources(manifest, m.Kind(\"PodTemplate\"), m.LabelSelector(\"app.kubernetes.io/name=sas-pup\"))\n  if err != nil {\n    panic(err)\n  }\n  return len(resources) > 0\n}\nfunc prepullPresent(manifest string) bool {\n  resources, err := m.Resources(manifest, m.Kind(\"Deployment\"), m.Name(\"sas-prepull\"))\n  if err != nil {\n    panic(err)\n  }\n  return len(resources) > 0\n}"
