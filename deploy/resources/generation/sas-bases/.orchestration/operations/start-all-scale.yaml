apiVersion: orchestration.sas.com/v3beta2
kind: LifecycleOperation
metadata:
  annotations:
    sas.com/component-name: sas-k8s-common
    sas.com/component-version: 2.99.0-20250311.1741724729436
  creationTimestamp: null
  name: start-all-scale
spec:
  args:
  - name: namespace
  - name: timeout
  source: |-
    package main
    import (
      "fmt"
      "sas/orchestration/lifecycle"
      c "sas/orchestration/lifecycle/cluster"
    )
    func main() {
      namespace := lifecycle.Arg("namespace")
      scale(namespace)
    }
    func scale(namespace string){
      scaleReplicaMap := make(map[string][]string)
      scaleCommand := []string{"scale", "--namespace", namespace, "--replicas"}

      deployments, err := c.MetadataResources(c.Namespace(namespace), c.Resource("Deployment"), c.LabelSelector("sas.com/deployment=sas-viya,sas.com/zero-scale-phase!=never"))
      if err != nil {
        panic(err)
      }
      statefulsets, err := c.MetadataResources(c.Namespace(namespace), c.Resource("StatefulSets"), c.LabelSelector("sas.com/deployment=sas-viya,sas.com/zero-scale-phase!=never"))
      if err != nil {
        panic(err)
      }
      metaresources := append(deployments, statefulsets...)

      for _, metaresource := range metaresources {
        replicas := lifecycle.LastAppliedConfigurationValue(metaresource,"{.spec.replicas}","1")
        name := metaresource.Name
        kind := metaresource.Kind
        resource := fmt.Sprintf("%s/%s", kind, name)
        scaleReplicaMap[replicas] = append(scaleReplicaMap[replicas], resource)
      }

      for replicaKey, scaleList := range scaleReplicaMap {
          command := append(scaleCommand, replicaKey)
          command = append(command, scaleList...)
          _, err = lifecycle.Kubectl(command...)
      }
    }
