apiVersion: orchestration.sas.com/v3beta6
kind: LifecycleOperation
metadata:
  annotations:
    sas.com/component-name: sas-k8s-common
    sas.com/component-version: 2.99.0-20250311.1741724729436
  creationTimestamp: null
  name: cluster-api-lib
spec:
  source: |-
    package clusterapilib
    import (
      "fmt"
      "sas/orchestration/lifecycle"
      c "sas/orchestration/lifecycle/cluster"
      ca "sas/orchestration/lifecycle/cadence"
    )
    func getClusterCrd(name string) *lifecycle.Resource {
      clusterCrds := c.Resources(c.Group("apiextensions.k8s.io"), c.Resource("CustomResourceDefinition"), c.Name(name))
      if len(clusterCrds) > 1 {
        panic(fmt.Sprintf("Expected one Resource but got more than one: %v", clusterCrds))
      }
      if len(clusterCrds) == 0 {
        return nil
      }
      return clusterCrds[0]
    }
    func kindOf(o *lifecycle.Resource) string {
      kindI := o.F("kind").Value()
      kind, ok := kindI.(string)
      if !ok {
        panic(fmt.Sprintf("no kind found for resource: %v", o.Value()))
      }
      return kind
    }
    func annotationOf(o *lifecycle.Resource, name string) string {
      annotationI := o.F("metadata").F("annotations").F(name).Value()
      annotation, ok := annotationI.(string)
      if !ok {
        return ""
      }
      return annotation
    }
    func nameOf(o *lifecycle.Resource) string {
      nameI := o.F("metadata").F("name").Value()
      name, ok := nameI.(string)
      if !ok {
        panic(fmt.Sprintf("no name found for resource: %v", o.Value()))
      }
      return name
    }
    func versionsOf(o *lifecycle.Resource) int {
      versionsI := o.F("spec").F("versions").Value()
      versions, ok := versionsI.([]interface{})
      if !ok {
        return 1
      }
      return len(versions)
    }
    func conversionStrategyOf(o *lifecycle.Resource) string {
      conversionStrategyI := o.F("spec").F("conversion").F("strategy").Value()
      conversionStrategy, ok := conversionStrategyI.(string)
      if !ok {
        return "None"
      }
      return conversionStrategy
    }
    func webhookNamespaceOf(o *lifecycle.Resource) string {
      webhookNamespaceI := o.F("spec").F("conversion").F("webhook").F("clientConfig").F("service").F("namespace").Value()
      webhookNamespace, ok := webhookNamespaceI.(string)
      if !ok {
        return ""
      }
      return webhookNamespace
    }
    // *********************************
    // Version check functions
    // *********************************
    func GetManifestVersionInfo(resource *lifecycle.Resource) ca.CadenceInfo {
      return ca.NewCadenceInfoFromAnnotations(resource)
    }
    func MustGetClusterVersionInfo(namespace, kind, name string) ca.CadenceInfo {
      resources, err := c.Resources(c.Namespace(namespace), c.Resource(kind), c.Name(name))
      if err != nil {
        panic(err)
      }
      if len(resources) > 1 {
        panic(fmt.Sprintf("Namespace %s contains multiple webhook resources with name %s", namespace, name))
      }
      if len(resources) == 0 {
         return nil
      }
      return ca.NewCadenceInfoFromAnnotations(resources[0])
    }
