apiVersion: orchestration.sas.com/v3beta6
kind: LifecycleOperation
metadata:
  annotations:
    sas.com/component-name: sas-k8s-common
    sas.com/component-version: 2.99.0-20250311.1741724729436
  creationTimestamp: null
  labels:
    participate.lifecycle.sas.com/assess: "true"
  name: version-check
spec:
  args:
  - name: namespace
    required: true
  - name: manifest
    required: true
  source: |-
    package main
    import (
      "fmt"
      "sas/orchestration/lifecycle"
      ca "sas/orchestration/lifecycle/cadence"
      cls "sas/orchestration/lifecycle/cluster"
      man "sas/orchestration/lifecycle/manifest"
    )
    func main() {
      manifest := lifecycle.Arg("manifest")
      namespace := lifecycle.Arg("namespace")

      manifestInfo := getManifestInfo(manifest)
      if manifestInfo == nil {
        return // should this be a failure?
      }

      clusterInfo := getClusterInfo(namespace)
      err := ca.VerifyUpdateIsAllowed(clusterInfo, manifestInfo)
      if err != nil {
        lifecycle.Fail(err.Error())
      }
    }
    func getManifestInfo(manifest string) ca.CadenceInfo {
      manifestConfigMaps, err := man.Resources(manifest, man.Kind("ConfigMap"), man.LabelSelector("orchestration.sas.com/lifecycle=metadata"))
      if err != nil {
        panic(err)
      }
      switch len(manifestConfigMaps) {
      case 0:
        return nil
      case 1:
        return ca.NewCadenceInfoFromConfigMap(manifestConfigMaps[0])
      default:
        panic("Error: Failed to find a unique lifecycle metadata ConfigMap in the manifest")
      }
    }
    func getClusterInfo(namespace string) ca.CadenceInfo {
      clusterConfigMaps, err := cls.Resources(cls.Namespace(namespace), cls.Resource("ConfigMap"), cls.LabelSelector("orchestration.sas.com/lifecycle=metadata"))
      if err != nil {
        panic(err)
      }
      switch len(clusterConfigMaps) {
      case 0:
        return nil
      case 1:
        return ca.NewCadenceInfoFromConfigMap(clusterConfigMaps[0])
      default:
        panic("Error: Failed to find a unique lifecycle metadata ConfigMap in the cluster")
      }
    }
