apiVersion: orchestration.sas.com/v3beta6
kind: LifecycleOperation
metadata:
  annotations:
    sas.com/component-name: sas-k8s-common
    sas.com/component-version: 2.99.0-20250311.1741724729436
  creationTimestamp: null
  name: cluster-api-deploy
spec:
  args:
  - name: clusterApiManifest
    required: true
  - name: clusterApiNamespace
  - default: 2700s
    name: timeout
  libraries:
  - cluster-api-lib
  source: |-
    package main
    import (
      "fmt"
      "encoding/json"
      "sas/orchestration/lifecycle"
      m "sas/orchestration/lifecycle/manifest"
      c "sas/orchestration/lifecycle/cluster"
      ca "sas/orchestration/lifecycle/cadence"
    )
    func main() {
      manifest := lifecycle.Arg("clusterApiManifest")
      resources := m.Resources(manifest, m.LabelSelector("sas.com/admin=cluster-api"))
      for _, resource := range resources {
        kind := clusterapilib.kindOf(resource)
        if kind == "CustomResourceDefinition" {
          deployCrd(resource)
        } else {
          deployWebhook(resource)
        }
      }
    }
    func deployCrd(resource *lifecycle.Resource) {
      namespace := lifecycle.Arg("clusterApiNamespace")
      kind := clusterapilib.kindOf(resource)
      name := clusterapilib.nameOf(resource)

      clusterInfo := clusterapilib.MustGetClusterVersionInfo(namespace, kind, name)
      manifestInfo := clusterapilib.GetManifestVersionInfo(resource)
      updateError := ca.VerifyUpdateIsAllowed(clusterInfo, manifestInfo)

      if updateError == nil {
        // Incoming crd is newer.  Go ahead and apply
        timeout := lifecycle.Arg("timeout")
        resourceBytes, err := json.Marshal(resource.Value())
        if err != nil {
          panic(err)
        }
        _, err = lifecycle.KubectlWithStdin(string(resourceBytes), "apply", "--timeout", timeout, "--namespace", namespace, "--server-side", "--force-conflicts", "-f", "-")
        if err != nil {
          panic(err)
        }
        _, err = lifecycle.Kubectl("wait", "--for", "condition=established", "--timeout", timeout, "crd", name)
        lifecycle.Log(fmt.Sprintf("The CRD %s will be applied.", name))
      } else {
        lifecycle.Log(fmt.Sprintf("The CRD %s will not be applied. A newer CRD by that name exists in the cluster.", name))
      }
    }
    func deployWebhook(resource *lifecycle.Resource) {
      namespace := lifecycle.Arg("clusterApiNamespace")
      kind := clusterapilib.kindOf(resource)
      name := clusterapilib.nameOf(resource)
      clusterInfo := clusterapilib.MustGetClusterVersionInfo(namespace, kind, name)
      manifestInfo := clusterapilib.GetManifestVersionInfo(resource)
      updateError := ca.VerifyUpdateIsAllowed(clusterInfo, manifestInfo)

      if updateError == nil {
        // Incoming webhook is newer.  Go ahead and apply
        timeout := lifecycle.Arg("timeout")
        resourceBytes, err := json.Marshal(resource.Value())
        if err != nil {
          panic(err)
        }
        _, err = lifecycle.KubectlWithStdin(string(resourceBytes), "apply", "--timeout", timeout, "--namespace", namespace, "-f", "-")
        if err != nil {
          panic(err)
        }
        lifecycle.Log(fmt.Sprintf("The webhook %s will be applied.", name))
      } else {
        lifecycle.Log(fmt.Sprintf("The webhook %s will not be applied. A newer webhook by that name exists in the cluster.", name))
      }
    }
